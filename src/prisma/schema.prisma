generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  UserTeam UserTeam[]
  Roadmap  Roadmap[]
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String?
  provider          String
  providerAccountId String  @map("provider_account_id")
  token_type        String?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  scope             String?
  id_token          String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verificationRequests")
}

model Team {
  id   String @id @default(cuid())
  name String
  slug String @unique

  users    UserTeam[]
  roadmaps Roadmap[]

  // stripe subscriptions
  // limits :json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

enum TeamRole {
  ADMIN
  MEMBER
}

model UserTeam {
  role   TeamRole @default(MEMBER)
  userId String
  teamId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId, teamId])
  @@index([userId])
  @@index([teamId])
  @@map("userTeams")
}

enum Status {
  BACKLOG
  ONGOING
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Roadmap {
  id          String  @id @default(cuid())
  name        String
  description String?
  teamId      String
  userId      String

  status Status  @default(ONGOING)
  phases Phase[]
  team   Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  deletedAt   DateTime?

  @@map("roadmaps")
}

model Phase {
  id          String  @id @default(cuid())
  title       String
  description String?
  roadmapId   String

  status   Status?
  priority Priority?
  roadmap  Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  tasks    Task[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  deletedAt   DateTime?

  @@map("phases")
}

model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  phaseId     String

  status   Status?
  priority Priority?
  phase    Phase     @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  todos    Todo[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  deletedAt   DateTime?

  @@map("tasks")
}

model Todo {
  id     String  @id @default(cuid())
  title  String
  taskId String?

  status   Status?
  priority Priority?
  Task     Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todos")
}
